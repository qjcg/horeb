// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: horeb.proto

package horeb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HorebClient is the client API for Horeb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HorebClient interface {
	GetStream(ctx context.Context, in *RuneRequest, opts ...grpc.CallOption) (Horeb_GetStreamClient, error)
}

type horebClient struct {
	cc grpc.ClientConnInterface
}

func NewHorebClient(cc grpc.ClientConnInterface) HorebClient {
	return &horebClient{cc}
}

func (c *horebClient) GetStream(ctx context.Context, in *RuneRequest, opts ...grpc.CallOption) (Horeb_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Horeb_ServiceDesc.Streams[0], "/horeb.Horeb/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &horebGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Horeb_GetStreamClient interface {
	Recv() (*Rune, error)
	grpc.ClientStream
}

type horebGetStreamClient struct {
	grpc.ClientStream
}

func (x *horebGetStreamClient) Recv() (*Rune, error) {
	m := new(Rune)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HorebServer is the server API for Horeb service.
// All implementations must embed UnimplementedHorebServer
// for forward compatibility
type HorebServer interface {
	GetStream(*RuneRequest, Horeb_GetStreamServer) error
	mustEmbedUnimplementedHorebServer()
}

// UnimplementedHorebServer must be embedded to have forward compatible implementations.
type UnimplementedHorebServer struct {
}

func (UnimplementedHorebServer) GetStream(*RuneRequest, Horeb_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedHorebServer) mustEmbedUnimplementedHorebServer() {}

// UnsafeHorebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HorebServer will
// result in compilation errors.
type UnsafeHorebServer interface {
	mustEmbedUnimplementedHorebServer()
}

func RegisterHorebServer(s grpc.ServiceRegistrar, srv HorebServer) {
	s.RegisterService(&Horeb_ServiceDesc, srv)
}

func _Horeb_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RuneRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HorebServer).GetStream(m, &horebGetStreamServer{stream})
}

type Horeb_GetStreamServer interface {
	Send(*Rune) error
	grpc.ServerStream
}

type horebGetStreamServer struct {
	grpc.ServerStream
}

func (x *horebGetStreamServer) Send(m *Rune) error {
	return x.ServerStream.SendMsg(m)
}

// Horeb_ServiceDesc is the grpc.ServiceDesc for Horeb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Horeb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "horeb.Horeb",
	HandlerType: (*HorebServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Horeb_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "horeb.proto",
}
